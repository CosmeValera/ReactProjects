Monorepo
A monorepo is a single repository that stores the code for multiple projects. This approach is used to manage and develop projects in a centralized way.

---
Characteristics of workspaces:
- Organizational System: Workspaces are an organizational system within monorepos that allow for the management of multiple packages or projects in a cohesive manner.
- Automatic Symlinking: Workspaces automatically create symbolic links (symlinks) between packages, making them available as if they were installed in the node_modules directory of each project.
- Optimized Dependencies with Hoisting: Dependency hoisting is a process where dependencies are moved to a higher level in the directory structure to reduce duplication and improve efficiency.

Dependency Hoisting
- Default Behavior: Dependency hoisting typically occurs by default in most monorepo tools (like Yarn Workspaces or Lerna). This means that if multiple projects within the monorepo depend on the same version of a package, the package will be "hoisted" to a common node_modules directory at the root of the monorepo.
- Single Dependency Hoisting: Even if a dependency is used by only one project, it may still be hoisted to the root-level node_modules directory to maintain consistency and simplify dependency management.
- Preventing Hoisting: To prevent a dependency from being hoisted, you must explicitly configure the tool to keep it at the project level. This can be done by specifying the dependency as non-hoistable in the tool's configuration file.
- Version Conflicts: If different projects require different versions of the same dependency, hoisting will not occur for that dependency. Instead, each project will maintain its own version to avoid conflicts.

---
What if two packages require two different versions of the same dependency?
YARN:
In yarn you can set the nohoist option.
With the nohoist option we can set the dependencies that we do not want to share, these dependencies will be in the node_modules of each packages that has it.

PNPM:
- Default (shamefully-hoist: false): Dependencies are installed in a nested structure specific to each package, avoiding conflicts.
- With shamefully-hoist: true: Dependencies are hoisted to the root node_modules, but pnpm still manages to avoid conflicts by maintaining some level of nesting and using a central store with symlinks.
To use pnpm in a monorepo, you need to add a file `pnpm-workspace.yaml` like this:
'
packages:
  - 'packages/*' 
shamefully-hoist: true # OPTIONAL
'

Abandon cd (YARN):
We can use the command "yarn workspace <workspace>" to start, build or install things in the repo without the need of using cd.
"yarn workspace module-a build"
"yarn workspace module-b add react"

---
YARN vs NPM vs PNPM:

NPM (1, N, --if-present):
npm --workspace=@monorepo-beginners/module-a run start
npm --workspaces run build
npm --workspaces --if-present run start

It does not support no-hoist, however it does deal with different versions of the same dependency in its own way (e.g: module-a-> react.18, module-b-> react.16. In root node_modules is installed react.18, and in module-b node_modules is installed react.16)

PNPM:
To use pnpm in a monorepo, you need to add a file `pnpm-workspace.yaml` like this:
'
packages:
  - 'packages/*' 
shamefully-hoist: true # OPTIONAL
'

In module-a.package.json, you have to change the version to 'workspace:*' to have symlink, like in here:
'
"dependencies": {
	"@monorepo-beginners/module-b": "workspace:*"
},
'

To not use cd, do it like this (1, 2, N):
pnpm -F "@monorepo-beginners/module-a" run start
pnpm -F "@monorepo-beginners/module-a" -F "@monorepo-beginners/module-b" run start
pnpm -F "@monorepo-beginners/*" run start

Regarding dependencies, pnpm uses a virtual store, in the root node_modules, so even thought it seems like it has a tree with all the dependencies in the root, actually there's just one copy of each one.

However there's the possibility to enable hoisting with pnpm. You have to create a '.npmrc' file, with content:
'
node-linker=hoisted
'
But for most use cases, it's just as advantageous to use the symlinking pattern. 

---
SCOPED PACKAGE vs NON-SCOPED PACKAGE:

Scoped Package (@monorepo-beginners/module-a):

- Namespace Management: Helps avoid naming conflicts by creating a unique namespace under monorepo-beginners.
- Organizational Clarity: Indicates the package is part of a larger organization or project.
- Visibility Control: Can be private by default but can be set to public using publishConfig.

Non-Scoped Package (module-a):
- Public by Default: Non-scoped packages are always public unless explicitly restricted.
- No Organizational Context: Doesn't provide an immediate context of ownership or association with a specific organization.
- Potential Naming Conflicts: Needs a globally unique name in the npm registry, which can be challenging.

---
LERNA:
